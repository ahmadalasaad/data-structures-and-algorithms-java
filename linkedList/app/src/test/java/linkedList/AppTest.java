/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linkedList;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test void testEmptyLinkedList(){
            LinkedList<Integer>testList=new LinkedList<Integer>();
            String expectedValue="NULL";
            assertEquals(expectedValue,testList.toString());
    }
    @Test void testInsertLinkedList(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        String expectedValue="{ 2 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testHeadLinkedList(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        Integer expectedValue=2;
        assertEquals(expectedValue,testList.head.value);
    }
    @Test void testInsertMultibleLinkedList(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);

        String expectedValue="{ 6 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testTrueLinkedList(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);

        boolean expectedValue=true;
        assertEquals(expectedValue,testList.includes(5));
    }
    @Test void testFalseLinkedList(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);

        boolean expectedValue=false;
        assertEquals(expectedValue,testList.includes(1));
    }
    @Test void testInsertCollectionLinkedList(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);

        String expectedValue="{ 6 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testInappend(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);
        testList.append(55);

        String expectedValue="{ 6 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> { 55 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testInMultiableAppend(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);
        testList.append(55);
        testList.append(77);

        String expectedValue="{ 6 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> { 55 } -> { 77 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testInAddBefore(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);
        testList.insertBefor(4,100);
        String expectedValue="{ 6 } -> { 5 } -> { 100 } -> { 4 } -> { 3 } -> { 2 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testInAddBeforeFirstItem(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);
        testList.insertBefor(6,100);
        String expectedValue="{ 100 } -> { 6 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testInAddAfterItem(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);
        testList.insertAfter(6,100);
        String expectedValue="{ 6 } -> { 100 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testInAddAfterLastItem(){
        LinkedList<Integer>testList=new LinkedList<Integer>();
        testList.insert(2);
        testList.insert(3);
        testList.insert(4);
        testList.insert(5);
        testList.insert(6);
        testList.insertAfter(2,100);
        String expectedValue="{ 6 } -> { 5 } -> { 4 } -> { 3 } -> { 2 } -> { 100 } -> NULL";
        assertEquals(expectedValue,testList.toString());
    }
    @Test void testIn_k_MoreThan(){
        LinkedList<Integer> listNumber=new LinkedList<Integer>();
        listNumber.insert(5);
        listNumber.insert(3);
        listNumber.insert(2);
        listNumber.insert(8);
        String expectedValue="Exception";
     assertEquals( expectedValue,listNumber.kthFromEnd(20));

    }
    @Test void testIn_k_equalListLength(){
        LinkedList<Integer> listNumber=new LinkedList<Integer>();
        listNumber.insert(5);
        listNumber.insert(3);
        listNumber.insert(2);
        listNumber.insert(8);
        String expectedValue="Exception";
        assertEquals( expectedValue,listNumber.kthFromEnd(4));

    }
    @Test void testIn_k_notPositiveNumber(){
        LinkedList<Integer> listNumber=new LinkedList<Integer>();
        listNumber.insert(5);

        String expectedValue="Exception";
        assertEquals( expectedValue,listNumber.kthFromEnd(-4));

    }
    @Test void testInListLengthEqualOne(){
        LinkedList<Integer> listNumber=new LinkedList<Integer>();
        listNumber.insert(5);
        Integer expectedValue=5;
        assertEquals( expectedValue,listNumber.kthFromEnd(0));

    }
    @Test void testIn_k_Middle(){
        LinkedList<Integer> listNumber=new LinkedList<Integer>();
        listNumber.insert(5);
        listNumber.insert(3);
        listNumber.insert(2);
        listNumber.insert(8);
        Integer expectedValue=2;
        assertEquals( expectedValue,listNumber.kthFromEnd(2));

    }
    @Test void testInZipLists(){
        App currentClassIntest=new App();
        LinkedList<Integer> listNumber=new LinkedList<Integer>();
        listNumber.insert(0);
        listNumber.insert(1);
        listNumber.insert(2);
        listNumber.insert(10);
        LinkedList<Integer> listNumber1=new LinkedList<Integer>();
        listNumber1.insert(3);
        listNumber1.insert(4);
        listNumber1.insert(5);
        String expectedValue="{ 10 } -> { 5 } -> { 2 } -> { 4 } -> { 1 } -> { 3 } -> { 0 } -> NULL";
        String actualResults= currentClassIntest.zipLists(listNumber,listNumber1).toString();
        assertEquals( expectedValue,actualResults);

    }
}
