/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackqueue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


class AppTest {

    /* challenge 10 */
   @Test void testInPushIntoStack() {
       Stack stack1=new Stack();
       stack1.push(9);
       String accpectedResult= "top-> { 9 } -> NULL";
       assertEquals(accpectedResult,stack1.toString());
   }
    @Test void testInPushMultibleIntoStack() {
        Stack stack1=new Stack();
        stack1.push(9);
        stack1.push(8);
        stack1.push(7);
        String accpectedResult= "top-> { 7 } ->  { 8 } ->  { 9 } -> NULL";
        assertEquals(accpectedResult,stack1.toString());
    }
    @Test void testInPopFromStack() {
        Stack stack1=new Stack();
        stack1.push(9);
        stack1.push(8);
        stack1.push(7);
        stack1.pop();
        String accpectedResult= "top-> { 8 } ->  { 9 } -> NULL";
        assertEquals(accpectedResult,stack1.toString());
    }
    @Test void testInPopEmptyStack() {
        Stack stack1=new Stack();
        stack1.push(9);
        stack1.push(8);
        stack1.push(7);
        stack1.pop();
        stack1.pop();
        stack1.pop();
        String accpectedResult= "top->NULL";
        assertEquals(accpectedResult,stack1.toString());
    }
    @Test void testInPeekStack() {
        Stack stack1=new Stack();
        stack1.push(9);
        stack1.push(8);
        stack1.push(7);

        Integer accpectedResult= 7;
        assertEquals(accpectedResult,stack1.peek());
    }
    @Test void testInEmptyStack() {
        Stack stack1=new Stack();

        String accpectedResult= "the stack already empty";
        assertEquals(accpectedResult,stack1.peek());
    }
    @Test void testInExiptionOnPopStack() {
        Stack stack1=new Stack();

        String accpectedResult= "the stack already empty";
        assertEquals(accpectedResult,stack1.peek());
    }
    @Test void testInEnQueue() {
        Queue queue1=new Queue();
        queue1.enqueue(2);

        String accpectedResult= "front-> { 2 } -> NUll";
        assertEquals(accpectedResult,queue1.toString());
    }
    @Test void testInMultibleEnQueue() {
        Queue queue1=new Queue();
        queue1.enqueue(2);
        queue1.enqueue(3);
        queue1.enqueue(9);

        String accpectedResult= "front-> { 2 } ->  { 3 } ->  { 9 } -> NUll";
        assertEquals(accpectedResult,queue1.toString());
    }
    @Test void testInDeQueue() {
        Queue queue1=new Queue();
        queue1.enqueue(2);
        queue1.enqueue(3);
        queue1.enqueue(9);

        queue1.dequeue();

        String accpectedResult= "front-> { 3 } ->  { 9 } -> NUll";
        assertEquals(accpectedResult,queue1.toString());
    }
    @Test void testInPeekQueue() {
        Queue queue1=new Queue();
        queue1.enqueue(9);
        queue1.enqueue(8);
        queue1.enqueue(7);

        Integer accpectedResult= 9;
        assertEquals(accpectedResult,queue1.peek());
    }
    @Test void testInEmptyDequeue() {
        Queue queue1=new Queue();
        queue1.enqueue(9);
        queue1.enqueue(8);
        queue1.enqueue(7);
        queue1.dequeue();
        queue1.dequeue();
        queue1.dequeue();


        String accpectedResult= "the stack already empty";
        assertEquals(accpectedResult,queue1.peek());
    }
    @Test void testInEmptyQueue() {
        Queue queue1=new Queue();

        String accpectedResult= "the stack already empty";
        assertEquals(accpectedResult,queue1.peek());
    }
    @Test void testInEmptyDequeRaisExiption() {
        Queue queue1=new Queue();
        queue1.dequeue();
        String accpectedResult= "the stack already empty";
        assertEquals(accpectedResult,queue1.peek());
    }
    /*challenge 11*/
    @Test void testInEnqueueIntoPseudoQueue() {
        PseudoQueue pseudoQueue=new PseudoQueue();
        pseudoQueue.enqueue(9);
        String accpectedResult= "top-> { 9 } -> NULL";
        assertEquals(accpectedResult,pseudoQueue.toString());
    }
    @Test void testInEnqueueMultipleToPseudoQueue() {
        PseudoQueue pseudoQueue=new PseudoQueue();
        pseudoQueue.enqueue(9);
        pseudoQueue.enqueue(8);
        pseudoQueue.enqueue(7);
        String accpectedResult= "top-> { 7 } ->  { 8 } ->  { 9 } -> NULL";
        assertEquals(accpectedResult,pseudoQueue.toString());
    }
    @Test void testInDequeueFromPseudoQueue() {
        PseudoQueue pseudoQueue=new PseudoQueue();
        pseudoQueue.enqueue(9);
        pseudoQueue.enqueue(8);
        pseudoQueue.enqueue(7);
        pseudoQueue.dequeue();
        String accpectedResult= "top-> { 7 } ->  { 8 } -> NULL";
        assertEquals(accpectedResult,pseudoQueue.toString());
    }
    @Test void testInDequeueEmptyPseudoQueue() {
        PseudoQueue pseudoQueue=new PseudoQueue();
        pseudoQueue.enqueue(9);
        pseudoQueue.enqueue(8);
        pseudoQueue.enqueue(7);
        pseudoQueue.dequeue();
        pseudoQueue.dequeue();
        pseudoQueue.dequeue();
        pseudoQueue.dequeue();
        String accpectedResult= "top->NULL";
        assertEquals(accpectedResult,pseudoQueue.toString());
    }
    /*---------------class12-------------------------*/
    @Test void testInEmptyAnimalshelter() {
        String accpectedResult="already empty";
        Animal dog1=new Dog("Spike");
        Animal dog2=new Dog("Pop");
        Animal dog3=new Dog("Rock");
        Animal cat1=new Cat("semsem");
        Animal cat2=new Cat("sokar");
        AnimalShelter house=new AnimalShelter();
        house.enqueue(dog1);
        house.enqueue(dog2);
        house.enqueue(dog3);
        house.enqueue(cat1);
        house.enqueue(cat2);
        house.dequeue();
        house.dequeue();
        house.dequeue();
        house.dequeue();
        house.dequeue();
        String acctualReasult= house.dequeue();

        assertEquals(accpectedResult,acctualReasult);
    }
    @Test void testInAnimalshelter() {
        String accpectedResult="dog";
        Animal dog1=new Dog("Spike");
        Animal dog2=new Dog("Pop");
        Animal dog3=new Dog("Rock");
        Animal cat1=new Cat("semsem");
        Animal cat2=new Cat("sokar");
        AnimalShelter house=new AnimalShelter();
        house.enqueue(dog1);
        house.enqueue(dog2);
        house.enqueue(dog3);
        house.enqueue(cat1);
        house.enqueue(cat2);
        house.dequeue();

        String acctualReasult= house.dequeue();

        assertEquals(accpectedResult,acctualReasult);
    }
    @Test void testInMultipleDequeueAndEnqueueInAnimalShelter() {
        String accpectedResult="cat";
        Animal dog1=new Dog("Spike");
        Animal dog2=new Dog("Pop");
        Animal dog3=new Dog("Rock");
        Animal cat1=new Cat("semsem");
        Animal cat2=new Cat("sokar");
        AnimalShelter house=new AnimalShelter();
        house.enqueue(dog1);
        house.enqueue(dog2);
        house.enqueue(dog3);
        house.enqueue(cat1);
        house.enqueue(cat2);
        house.dequeue();
        house.dequeue();
        house.dequeue();
        house.dequeue();
        String acctualReasult= house.dequeue();

        assertEquals(accpectedResult,acctualReasult);
    }
    /*---------------class12-------------------------*/
@Test
    void testInValidatorTrue(){
    App testApp= new App();
    String str="()()([]({}))[]";

    assertTrue(testApp.validateBrackets(str));
}
    @Test
    void testInValidatorFalse(){
        App testApp= new App();
        String str="()()([]({)[]";

        assertFalse(testApp.validateBrackets(str));
    }
    @Test
    void testInValidatorEmpty(){
        App testApp= new App();
        String str="";

        assertTrue(testApp.validateBrackets(str));
    }

}

