/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashtable;

import org.junit.jupiter.api.Test;
import tree.BinarySearchTree;
import tree.Node;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    private HashTable<String, Integer> test = new HashTable<>();
    private HashTable<String, String> test1 = new HashTable<>();
    @Test
    public void addTest(){
        test.add("ahmad1",1);
        test.add("ahmad2",2);
        test.add("ahmad3",3);
        test.add("ahmad4",4);
    }
/*ch30*/
    @Test
    public void addAssertTest(){
        test.add("ahmad5",5);
        assertEquals(test.get("ahmad5"), 5);
    }

    @Test
    public void nullTest(){
        assertNull(test.get("ahmad"));
    }

    @Test
    public void containTest(){
        test.add("ahmad1",1);
        test.add("ahmad2",2);

        assertTrue(test.contain("ahmad1"));
    }

    @Test
    public void uncontainedTest(){
        test.add("ahmad1",1);
        test.add("ahmad2",2);

        assertFalse(test.contain("ahmad"));
    }

    @Test
    public void sizeTest(){
        test.add("ahmad1",1);
        test.add("ahmad2",2);

        assertEquals(2,test.getSize());
    }
    /*ch31*/
    @Test
    public void repeatedWordTest(){
        String input = "hello from the other side, hello it's me";
        String expected = test.firstRepeated(input);
        assertEquals("hello", expected);
    }

    @Test
    public void repeatedWordFailedTest(){
        String input = "hello from the other side";
        String expected = test.firstRepeated(input);
        assertNotEquals("hello", expected);
    }
    /*ch32*/
    @Test
    public void repeatedNodeTest(){
        BinarySearchTree binaryTree1= new BinarySearchTree();

        binaryTree1.root =new Node(300);
        binaryTree1.root.left=new Node(2);
        binaryTree1.root.right=new Node(3);
        binaryTree1.root.left.left=new Node(50);

        BinarySearchTree binaryTree2= new BinarySearchTree();

        binaryTree2.root=new Node(1);
        binaryTree2.root.left=new Node(300);
        binaryTree2.root.right=new Node(7);
        binaryTree2.root.left.left=new Node(90);
        binaryTree2.root.left.right=new Node(8);
        ArrayList accpected=new ArrayList();
        accpected.add(300);
        assertEquals(accpected,test.repeatedNodes(binaryTree1,binaryTree2));
    }

    @Test
    public void repeatedNodeFailedTest(){
        BinarySearchTree binaryTree1= new BinarySearchTree();

        binaryTree1.root=new Node(300);
        binaryTree1.root.left=new Node(2);
        binaryTree1.root.right=new Node(3);
        binaryTree1.root.left.left=new Node(50);

        BinarySearchTree binaryTree2= new BinarySearchTree();

        binaryTree2.root=new Node(1);
        binaryTree2.root.left=new Node(300);
        binaryTree2.root.right=new Node(7);
        binaryTree2.root.left.right=new Node(90);
        binaryTree2.root.left.right=new Node(8);
        ArrayList accpected=new ArrayList();
        accpected.add(20);
        assertNotEquals(accpected, test.repeatedNodes(binaryTree1,binaryTree2));

    }
    @Test

    public void leftJoinTest(){
        HashTable<String, String> first = new HashTable<>();
        HashTable<String, String> second = new HashTable<>();

        first.add("fond","enamored");
        first.add("wrath","anger");
        first.add("guide","usher");

        second.add("fond","averse");
        second.add("wrath","delight");
        second.add("guide","follow");

        assertEquals("[[fond, enamored, averse], [wrath, anger, delight], [guide, usher, follow]]", test1.leftJoin(first,second).toString());
    }

    @Test
    public void leftJoinFailedTest(){
        HashTable<String, String> first = new HashTable<>();
        HashTable<String, String> second = new HashTable<>();

        first.add("fond","enamored");
        first.add("wrath","anger");
        first.add("guide","usher");

        second.add("fond","averse");
        second.add("wrath","delight");
        second.add("guide","follow");

        assertNotEquals("[[fond, averse], [anger, delight], [guide, usher,]]", test1.leftJoin(first,second).toString());

    }}
